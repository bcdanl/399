---
title: Lecture 5
subtitle: Graph tables, add labels, make notes
format:
  clean-revealjs:
    self-contained: true
    incremental: true
    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-02-23
execute: 
  eval: true
  echo: true
  warning: false
  message: false
callout-icon: false

from: markdown+emoji

# bibliography: refs.bib
include-after-body: target-hover.html
---

```{r}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)
library(socviz)
library(gapminder)
library(ggrepel)

theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 90,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```


# Data Visualization with `ggplot()` {background-color="#1c4982"}

## Data Visualization with `ggplot()`


- Step 1. Figure out whether variables of interests are **categorical** or **continuous**.

- Step 2. Think which **geometric objects**, **aesthetic mappings**, and **faceting** are appropriate to visualize *distributions* and *relationships*.

- Step 3. If needed, transform a given `data.frame` (e.g., *filtered observations*, new variables, summarized data) and try new visualizations.


## Data Visualization with `ggplot()`
### Geometric objects

  - A distribution of a categorical variable (e.g., `geom_bar()` and more)
  - A distribution of a continuous variable (e.g., `geom_histogram()` and more)
  - A relationship between two categorical variables (e.g., `geom_bar()` and more)
  - A relationship between two continuous variables (e.g., `geom_point()` with `geom_smooth()` and more)
  - A relationship between a categorical variable and a continuous variable (e.g., `geom_boxplot()` and more)
  - A time trend of a categorical variable (e.g., `geom_bar()` and more)
  - A time trend of a continuous variable (e.g., `geom_line()` and more)



# Graph tables, add labels, make notes {background-color="#1c4982"}


## Graph tables, add labels, make notes

- We will learn about how to transform `data.frame` before we send it to `ggplot` to be turned into a figure. 
  - We will learn how to use some of `dplyr`'s “action verbs” to `filter`, `select`, `group`, `mutate`, `summarize` and transform our data.


- We will expand the number of geoms we know about, and learn more about how to choose between them. 
  - Different geoms potentially requires different aesthetic mappings.

- We discuss the five key `dplyr` functions to solve various data manipulation challenges




## Data Transformation
### `dplyr` basics

  - Filter observations by logical conditions about values of variables (`filter()`).
  - Arrange/sort rows (`arrange()`).
  - Select variables by their names (`select()`).
  - Rename variables by their names (`rename()`).
  - Create new variables with functions of existing variables (`mutate()`).
  - Relocate existing variables by their names (`relocate()`).
  - Collapse a data.frame down to a summarized version of it (`summarize()`).
  - Group a data.frame by a categorical variable (`group_by()`).




## Data Transformation
### `dplyr` basics

Tools -> Global Options -> Code -> Check "User native pipe operator"

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/native-pipe-r.png" width="400px">
</p>





## Data Transformation

- Because the first argument is a `data.frame` and the output is a `data.frame`, `dplyr` verbs work well with the **pipe**, `|>` 
  - **Ctrl + Shift + M** for Windows; **command + Shift + M** for Mac. 


- The **pipe** (`|>`) takes the thing on its left and passes it along to the function on its right so that
  - `f(x, y)` is equivalent to `x |> f(y)`. 
  - e.g., `filter(DATA_FRAME, LOGICAL_STATEMENT)` is equivalent to `DATA_FRAME |>  filter(LOGICAL_STATEMENT)`.


- The easiest way to pronounce the **pipe** (`|>`) is “**then**”. 
  - The **pipe** (`|>`) is super useful when we have <u>*a chain of data transforming operations*</u> to do.



## Data Transformation
### `dplyr` basics

- `DATA_FRAME |> filter(LOGICAL_CONDITIONS)`
- `DATA_FRAME |> arrange(VARIABLES)`
- `DATA_FRAME |> select(VARIABLES)`
- `DATA_FRAME |> rename(NEW_VAR = EXISTING_VAR)`
- `DATA_FRAME |> mutate(NEW_VARIABLE = ... )`
- `DATA_FRAME |> relocate(VARIABLES)`
- `DATA_FRAME |> group_by(VARIABLES)`
- `DATA_FRAME |> summarize(NEW_VARIABLE = ...)`


- The subsequent arguments describe what to do with the data.frame, mostly using variable names.
<!-- - The output is a **data.frame**. -->





## Graph tables, add labels, make notes
### Use pipes to summarize data

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/socviz_fig5_1.png">
</p>

- Let's describe how the distribution of religious preferences varies by regions in the US using the `socviz::gss_sm` data.frame.



## Graph tables, add labels, make notes
### Use pipes to summarize data

- Group the data into the nested structure we want for our summary, such as “Religion by Region” or “Authors by Publications by Year”.


- Filter or select pieces of the data by row, column, or both. 


- Mutate the data by creating new variables at the current level of grouping.    
  - This adds new columns to the table without aggregating it.


- Summarize or aggregate the grouped data. 
  - This creates new variables (e.g., means with `mean()`, sums with `sum()`, and counts with `n()`) at a higher level of grouping.





## Graph tables, add labels, make notes
### Use pipes to summarize data

```{r}
rel_by_region <- gss_sm |>
    group_by( bigregion, religion ) |>
    summarize( N = n() ) |>
    mutate( freq = N / sum(N),
            pct = round( (freq*100), 0) )
```


- We use the dplyr functions, `group_by()`, `filter()`, `select()`, `mutate()`, and `summarize()`, to carry out these data transformation tasks within our pipeline (`|>`, **Ctrl/Cmd + Shift + M**). 

- Here we create a new data.frame called `rel_by_region`.




## Graph tables, add labels, make notes
### Use pipes to summarize data


```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot( rel_by_region, 
             aes( x = bigregion, 
                  y = pct, 
                  fill = religion))

p + geom_col( position = "dodge2" ) +
    labs(x = "Region", 
         y = "Percent", 
         fill = "Religion") +
    theme(legend.position 
            = "top") 
```

- Now that we are working directly with percentage values in a summary table, we can use `geom_col()` instead of `geom_bar()`.



## Graph tables, add labels, make notes
### Use pipes to summarize data


```{r}
#| echo: false
p <- ggplot(rel_by_region, 
            aes(x = pct, 
                y = religion, 
                fill = religion))
p + geom_col(position = "dodge2") +
    labs(x = NULL, 
         y = "Percent", 
         fill = "Religion") +
    guides(fill = FALSE) + 
    facet_grid(~ bigregion)
```

- Let's replicate the above bar chart.



## Graph tables, add labels, make notes
### Continuous variables by group or category



```{r}
#| eval: false
organdata
skimr::skim(organdata)
```

- Let’s move to a new dataset, the `socviz::organdata` data.frame. 


## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = organdata,
            mapping = 
              aes(x = year, 
                  y = donors))
p + geom_point()
```


## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = organdata,
            mapping = aes(x = year, y = donors))
p + 
  geom_line(aes(group = country)) + 
  facet_wrap(~ country) +
  theme(axis.text.x = 
          element_text(angle = 45))

```

- The above describes a yearly trend of `donors` for each country.

## Graph tables, add labels, make notes
### Continuous variables by group or category



```{r}
#| echo: false
p <- ggplot(data = organdata,
            mapping = aes(y = country, x = donors))
p + geom_boxplot()
```

- Let’s focus on the country-level variation of `donors` using `geom_boxplot()`, but without paying attention to the time trend.


## Graph tables, add labels, make notes
### Continuous variables by group or category
```{r}
#| eval: false
levels(organdata$country)
```

```{r}
organdata <- organdata |>
  mutate(country = 
           fct_reorder(country, 
                       donors, na.rm = T) ) 
```



- We can reorder the levels using `fct_reorder(f, x, fun)`, which can take three arguments.
  - `f`: the factor whose levels we want to modify.
  - `x`: a numeric vector that we want to use to reorder the levels.
  - Optionally, `fun`: a function that's used if there are multiple values of `x` for each value of `f`. The default value is *median*.




## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = organdata,
            mapping = 
              aes(x = country, 
                  y = donors))
p + geom_boxplot() + 
  labs(x = NULL) + 
  coord_flip()
```



## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = organdata,
            mapping = 
              aes(x = 
                    reorder(
                      country, 
                      donors, 
                      na.rm=TRUE),
                  y = donors, 
                  fill = world))
p + geom_boxplot() + 
  labs(x=NULL) +
  coord_flip() + 
  theme(legend.position = "top")
```


## Graph tables, add labels, make notes
### Continuous variables by group or category



- Sometimes it is better to sort the data with a categorical variable when plotting a bar chart or a Cleveland dotplot.



## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
by_country <- organdata |> group_by(consent_law, country) |>
    summarize(donors_mean= mean(donors, na.rm = TRUE),
              donors_sd = sd(donors, na.rm = TRUE),
              gdp_mean = mean(gdp, na.rm = TRUE),
              health_mean = mean(health, na.rm = TRUE),
              roads_mean = mean(roads, na.rm = TRUE),
              cerebvas_mean = mean(cerebvas, na.rm = TRUE))
```

- Summarize the data.frame `organdata` to calculate the mean and the standard deviation of each numeric variable for each `consent_law`-`country` pair.

- Would there be a simpler way to do the task above?



## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
by_country <- organdata |> group_by(consent_law, country) |>
  summarize_if(is.numeric, lst(mean, sd), na.rm = TRUE) |>
  ungroup()
```

- What we would like to do is apply the `mean()` and `sd()` functions to every numerical variable in `organdata`, but only the numerical ones. 

  - `summarize_if( is.numeric, lst(mean, sd), na.rm = T)` works really well.

## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
#| echo: false
by_country <- organdata |> group_by(consent_law, country) |>
  summarize_if(is.numeric, lst(mean, sd), na.rm = TRUE) |>
  ungroup()

p <- ggplot(data = by_country,
            mapping = aes(x = donors_mean, y = reorder(country, donors_mean),
                          color = consent_law))
p + geom_point(size=3) +
    labs(x = "Donor Procurement Rate",
         y = "", color = "Consent Law") +
    theme(legend.position="top")

```

- Let's draw the above dot plot.


## Graph tables, add labels, make notes
### Continuous variables by group or category


```{r}
#| echo: false
by_country <- organdata |> group_by(consent_law, country) |>
  summarize_if(is.numeric, lst(mean, sd), na.rm = TRUE) |>
  ungroup()

p <- ggplot(data = by_country,
            mapping = aes(x = donors_mean,
                          y = reorder(country, donors_mean)))

p + geom_point(size=3) +
    facet_wrap(~ consent_law, scales = "free_y", ncol = 1) +
    labs(x= "Donor Procurement Rate",
         y= "") 
```

- Let's draw the above faceted dot plot.


## Graph tables, add labels, make notes
### Continuous variables by group or category

- Cleveland dotplots are generally preferred to bar or column charts.
  - When making them, put the categories on the y-axis and order them in the way that is most relevant to the numerical summary you are providing.
  - This sort of plot is also an excellent way to summarize model results or any data with **error ranges**. 
  
  


## Graph tables, add labels, make notes
### Continuous variables by group or category
  
- Using `geom_pointrange()`, we can tell ggplot to show us a point estimate and a range around it.
  -  With `geom_pointrange()`, we map our `x` and `y` variables as usual, but the function needs a little more information than `geom_point()`, for example (`ymin`, `ymax`) or (`xmin`, `xmax`). 
  


## Graph tables, add labels, make notes
### Continuous variables by group or category



```{r}
#| echo: false
p <- ggplot(data = by_country, mapping = aes(x = reorder(country,
              donors_mean), y = donors_mean))

p + geom_pointrange(mapping = aes(ymin = donors_mean - donors_sd,
       ymax = donors_mean + donors_sd)) +
     labs(x= "", y= "Donor Procurement Rate") + coord_flip()
```

- Let's draw the above dot-and-whisker plot.



# Understanding Scales, Guides, and Themes {background-color="#1c4982"}



## Understanding Scales, Guides, and Themes

- We have used `scale_x_log10()`, `scale_x_continuous()` and other` scale_*_*()` functions to adjust axis labels. 

- We used the `guides()` function to remove the legends for a color mapping and a `label` mapping. 

- We also used the `theme()` function to move the position of a legend from the side to the top of a figure.

- What are the differences between the `scale_*_*()` functions, the `guides()` function, and the `theme()` function? 

- When do we know to use one rather than the other? Why are there so many `scale_*_*()` functions? How can we tell which one we need?



## Understanding Scales, Guides, and Themes


- Here is a rough and ready starting point:


- Every aesthetic mapping has a **scale**. 

  - If we want to adjust how that scale is marked or graduated, then we use a `scale_*_*()` function.



## Understanding Scales, Guides, and Themes

- Many scales come with a **legend** or key to help the reader interpret the graph. These are called `guides`. 
  - We can make adjustments to them with the `guides()` function. 
  - Perhaps the most common use case is to make the legend disappear.
  - Another is to adjust the arrangement of the key in *legends* and *colorbars*.
  - `guides` is also one of the parameters in `scales_*_*()`.

## Understanding Scales, Guides, and Themes

- Graphs have other features not strictly connected to the logical structure of the data being displayed. 

  - These include things like their background color, the typeface used for labels, or the placement of the legend on the graph. 
  
  - To adjust these, use the `theme()` function.








## Understanding Scales, Guides, and Themes

```{r}
#| eval: false
p <- ggplot(data = organdata,
            mapping = aes(x = roads, y = donors, color = world))
p + geom_point()
```

- `scale_*_*()` and `guides()` are closely connected.
  - The `guides()` provides information about the `scale`, such as in a **legend** or **colorbar**.
  - So, it is possible to make adjustments to guides from inside the various `scale_*_*()` functions.
  
- The `x` and `y` scales are both **continuous**.
- The `color` scale is **discrete**.
  - A `color` or `fill` mapping can also be a *continuous* quantity (*colorbar*).
  
  
  

## Understanding Scales, Guides, and Themes
### `scale_<MAPPING>_<KIND>`

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/scale_mapping_kind.png" width="600px">
</p>

- Because we have several potential mappings, and each mapping might be to one of several different scales, we end up with a lot of individual `scale_*_*` functions. 
  - Each deals with one combination of mapping and scale. Too many to memorize. 
  - They are named according to a consistent logic:
  

- [https://ggplot2tor.com/scales](https://ggplot2tor.com/scales) provides a complete guide to scales.
  - This app makes it easy for you to find the right scales and arguments for your variable types and aesthetics.




## Understanding Scales, Guides, and Themes

- Let's replicate the following:
  <!-- - Use the `log10` scale on x-axis. -->
  <!-- - Break y-axis at `c(5, 15, 25)`, and label them as `c("Five", "Fifteen", "Twenty Five")`. -->

```{r}
#| echo: false
p <- ggplot(data = organdata,
            mapping = aes(x = roads,
                          y = donors,
                          color = world))
p + geom_point() +
    scale_y_continuous(breaks = c(5, 15, 25),
                       labels = c("Five", "Fifteen", "Twenty Five"))

```


## Understanding Scales, Guides, and Themes

  <!-- - Label colors to `c("Corporatist", "Liberal", "Social Democratic", "Unclassified")` -->
  <!-- - Label `x`-axis, `y`-axis, and a title of `color` legend using `labs()`. -->

```{r}
#| echo: false
p <- ggplot(data = organdata,
            mapping = aes(x = roads,
                          y = donors,
                          color = world))
p + geom_point() +
    scale_color_discrete(labels =
                             c("Corporatist", "Liberal",
                               "Social Democratic", "Unclassified")) +
    labs(x = "Road Deaths",
         y = "Donor Procurement",
        color = "Welfare State")
```

- Let's replicate the above.

## Understanding Scales, Guides, and Themes

  <!-- - Use the `log10` scale on x-axis. -->
  <!-- - Break y-axis at `c(5, 15, 25)`, and label them as `c("Five", "Fifteen", "Twenty Five")`. -->

```{r}
#| echo: false
organdata |> 
  ggplot(mapping = aes(x = roads,
                       y = donors,
                       color = consent_law)) + 
  geom_point() +
  facet_wrap(~ consent_law, ncol = 1) +
  guides(color = "none") + 
  labs(x = "Road Deaths",
       y = "Donor Procurement")

```

- Let's replicate the above.


## Understanding Scales, Guides, and Themes

  <!-- - Use the `log10` scale on x-axis. -->
  <!-- - Break y-axis at `c(5, 15, 25)`, and label them as `c("Five", "Fifteen", "Twenty Five")`. -->

```{r}
#| echo: false
## Using the "classic" ggplot theme here
organdata |> 
  ggplot(mapping = aes(x = roads,
                       y = donors,
                       color = consent_law)) + 
  geom_point() +
  labs(title = "By Consent Law",
    x = "Road Deaths",
    y = "Donor Procurement", 
    color = "Legal Regime:") + 
  theme(legend.position = "bottom", 
        plot.title = element_text(color = "darkred",
                                  face = "bold"))

```

- Let's replicate the above using `theme()`.


# Add Labels and Make Notes  {background-color="#1c4982"}


## Add Labels and Make Notes
### Plot text directly

  
  
```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = by_country,
            mapping = 
              aes(x = roads_mean, 
                  y = donors_mean))
p + geom_point() + 
  geom_text(mapping = 
              aes(label = country))
```
- It can sometimes be useful to plot the labels along with the points in a scatterplot, or just plot informative labels directly using `geom_text()`.


## Add Labels and Make Notes
### Plot text directly

```{r}
#| fig-asp: .85
#| output-location: column-fragment

p + geom_point() + 
  geom_text(mapping = 
              aes(label = country), 
            hjust = 0)
```



- By default, the text is plotted right on top of the points.
- `hjust = 0` will left justify the label; `hjust = 1` will right justify it.

## Add Labels and Make Notes

```{r}
#| echo: false
p_title <- "Presidential Elections: Popular & Electoral College Margins"
p_subtitle <- "1824-2016"
p_caption <- "Data for 2016 are provisional."
x_label <- "Winner's share of Popular Vote"
y_label <- "Winner's share of Electoral College Votes"

p <- ggplot(elections_historic, aes(x = popular_pct, y = ec_pct,
                                    label = winner_label))

p + geom_hline(yintercept = 0.5, linewidth = 1.4, color = "gray80") +
    geom_vline(xintercept = 0.5, linewidth = 1.4, color = "gray80") +
    geom_point() +
    geom_text_repel() +
    scale_x_continuous(labels = scales::percent) +
    scale_y_continuous(labels = scales::percent) +
    labs(x = x_label, y = y_label, title = p_title, subtitle = p_subtitle,
         caption = p_caption)

```




## Add Labels and Make Notes
### Plot text directly


```{r}
#| eval: false
install.packages("ggrepel")
library(ggrepel)
```
- Instead of wrestling any further with `geom_text()`, we can use `ggrepel::geom_text_repel()` instead. 


## Add Labels and Make Notes
### Plot text directly

```{r}
#| eval: false
socviz::elections_historic |> select(2:7) 
```
- Let's use some historical U.S. presidential election data provided in the `socviz` library.


## Add Labels and Make Notes
### Plot text directly

```{r}
p <- ggplot(elections_historic, aes(x = popular_pct, y = ec_pct,
                                    label = winner_label))
```
- Step 1. Let's map aethetics to variables


## Add Labels and Make Notes
### Plot text directly

```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- p + 
    geom_hline(yintercept = 0.5, 
               linewidth = 1.4, 
               color = "gray80") +
    geom_vline(xintercept = 0.5, 
               linewidth = 1.4, 
               color = "gray80") +
    geom_point() +
    geom_text_repel()
p
```
- Step 2. Then, add geometric objects to ggplot.


## Add Labels and Make Notes
### Plot text directly

```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- p + 
     scale_x_continuous(
       labels = scales::percent) +
     scale_y_continuous(
       labels = scales::percent) 
p
```

- Step 3. Let's set the scales for `x` and `y`.

## Add Labels and Make Notes
### Plot text directly

```{r}
#| fig-asp: .85
#| output-location: column-fragment

p_title <- "Presidential Elections: Popular & Electoral College Margins"
p_subtitle <- "1824-2016"
p_caption <- "Data for 2016 are provisional."
x_label <- "Winner's share of Popular Vote"
y_label <- "Winner's share of Electoral College Votes"

p + labs(x = x_label, 
         y = y_label, 
         title = p_title, 
         subtitle = p_subtitle,
         caption = p_caption)
```

- Step 4. Let's set the labels.



## Add Labels and Make Notes
### Label Outliers


```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = by_country,
            mapping = 
              aes(x = gdp_mean, 
                  y = health_mean))

p + geom_point() +
    geom_text_repel(
      data = filter(by_country, 
                    gdp_mean > 25000),
      mapping = 
        aes(label = country))
```


- Sometimes we want to pick out some points of interest in the data without labeling every single item. 
  -  We do this using the `filter()` function.

## Add Labels and Make Notes
### Label Outliers

```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = by_country,
            mapping = 
              aes(x = gdp_mean, 
                  y = health_mean))
p + geom_point() +
    geom_text_repel(
      data = 
        filter(by_country,
               gdp_mean > 25000 | 
                 health_mean < 1500 |
                 country %in% "Belgium"),
      mapping = 
        aes(label = country))
```




## Add Labels and Make Notes
### Label Outliers


```{r}
#| fig-asp: .85
#| output-location: column-fragment
# creating a dummy variable for labels
organdata$ind <- 
  organdata$ccode %in% c("Ita", "Spa") & 
  organdata$year > 1998   
p <- ggplot(data = organdata,
            mapping = 
              aes(x = roads, 
                  y = donors, 
                  color = ind))
p + geom_point() +
    geom_text_repel(
      data = filter(organdata, ind),
      mapping = aes(label = ccode)) +
    guides(label = "none", 
           color = "none")
```

- We can also add a logical variable (either `TRUE` or `FALSE`) to label specific points using `filter()`.




## Add Labels and Make Notes
### Label Outliers

```{r}
#| echo: false
dat <- filter(mtcars, 
              wt > 5 & mpg < 15)
dat$car <- rownames(dat)

p <- ggplot() + 
  geom_point(data = mtcars, 
             aes(wt, mpg), 
             color = 'red')
p1 <- p + geom_text_repel(data = dat, 
                          aes(wt, mpg, 
                              label = car))
p1
```

- Let's replicate the above using `ggplot::mtcars`:


## Add Labels and Make Notes
### Write and draw in the plot area with `annotate(geom = "text")`

  <!-- - Maybe we sometimes need to point out something important that is not mapped to a variable.  -->

```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = organdata, 
            mapping = 
              aes(x = roads, 
                  y = donors))
p + geom_point() + 
  annotate(geom = "text", 
           x = 91, y = 33,
           label = "A surprisingly high \n recovery rate.",
           hjust = 0)
```
- We can use `annotate()` to annotate the figure directly. 


## Add Labels and Make Notes
### Write and draw in the plot area with `annotate(geom = "rect")`
```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(data = organdata,
            mapping = aes(x = roads, y = donors))
p + geom_point() +
    annotate(geom = "rect", 
             xmin = 125, xmax = 155,
             ymin = 30, ymax = 35, 
             fill = "red", 
             alpha = 0.2) + 
    annotate(geom = "text", 
             x = 157, y = 33,
             label = "A surprisingly high \n recovery rate.", 
             hjust = 0)

```



## Add Labels and Make Notes
### Write and draw in the plot area with `annotate(geom = "point")`
```{r}
#| fig-asp: .85
#| output-location: column-fragment

p <- ggplot(mpg, aes(displ, hwy)) +
  geom_point(
    data = 
      filter(mpg, 
             manufacturer == "subaru"), 
    color = "orange", 
    size = 3) +
  geom_point() 
p + 
  annotate(geom = "point", 
           x = 5.5, y = 40, 
           colour = "orange", 
           size = 3) + 
  annotate(geom = "point", 
           x = 5.5, y = 40) + 
  annotate(geom = "text", 
           x = 5.6, y = 40, 
           label = "subaru", 
           hjust = "left")
```


## Add Labels and Make Notes
### Write and draw in the plot area with `annotate(geom = "curve")`

```{r}
#| fig-asp: .85
#| output-location: column-fragment

p + 
  annotate(
    geom = "curve", 
    x = 4, y = 35, 
    xend = 2.65, yend = 27, 
    curvature = .3, 
    arrow = 
      arrow(length = unit(2, "mm"))
  ) +
  annotate(geom = "text", 
           x = 4.1, y = 35, 
           label = "subaru", 
           hjust = "left")
```


